// ECE 4530 
// Fall 2013
// Homework 9

dp block_code(in  data:    ns(32); 
        out  code: ns(32);
        out syndrome:  ns(32)) {

  lookup G : ns(32) = {8, 4, 2, 1, 14, 7, 13};
  lookup H : ns(32) = {116, 58, 105};

  sig c11,c12,c13,c14,c15,c16,c17 : ns(1);
  sig c21,c22,c23,c24,c25,c26,c27 : ns(1);
  sig c31,c32,c33,c34,c35,c36,c37 : ns(1);
  sig c41,c42,c43,c44,c45,c46,c47 : ns(1);
  sig c1,c2,c3,c4 : ns(8);
  sig d1,d2,d3,d4 : ns(4);

  sig s1,s2,s3,s4 : ns(8);
  sig s11,s12,s13 : ns(1);
  sig s21,s22,s23 : ns(1);
  sig s31,s32,s33 : ns(1);
  sig s41,s42,s43 : ns(1);

  always {
          //block code calculation
          d1 =((data>>24) & 0xF );
          d2 =((data>>16) & 0xF );
          d3 =((data>>8) & 0xF );
          d4 =(data & 0xF );

          c11= (d1[0] & G(0)[0]) ^ (d1[1] & G(0)[1]) ^ (d1[2] & G(0)[2]) ^ (d1[3] & G(0)[3]);
          c12= (d1[0] & G(1)[0]) ^ (d1[1] & G(1)[1]) ^ (d1[2] & G(1)[2]) ^ (d1[3] & G(1)[3]);
          c13= (d1[0] & G(2)[0]) ^ (d1[1] & G(2)[1]) ^ (d1[2] & G(2)[2]) ^ (d1[3] & G(2)[3]);
          c14= (d1[0] & G(3)[0]) ^ (d1[1] & G(3)[1]) ^ (d1[2] & G(3)[2]) ^ (d1[3] & G(3)[3]);
          c15= (d1[0] & G(4)[0]) ^ (d1[1] & G(4)[1]) ^ (d1[2] & G(4)[2]) ^ (d1[3] & G(4)[3]);
          c16= (d1[0] & G(5)[0]) ^ (d1[1] & G(5)[1]) ^ (d1[2] & G(5)[2]) ^ (d1[3] & G(5)[3]);
          c17= (d1[0] & G(6)[0]) ^ (d1[1] & G(6)[1]) ^ (d1[2] & G(6)[2]) ^ (d1[3] & G(6)[3]);
          c1= (c11 # c12 # c13 # c14 # c15 # c16 # c17);

          c21= (d2[0] & G(0)[0]) ^ (d2[1] & G(0)[1]) ^ (d2[2] & G(0)[2]) ^ (d2[3] & G(0)[3]);
          c22= (d2[0] & G(1)[0]) ^ (d2[1] & G(1)[1]) ^ (d2[2] & G(1)[2]) ^ (d2[3] & G(1)[3]);
          c23= (d2[0] & G(2)[0]) ^ (d2[1] & G(2)[1]) ^ (d2[2] & G(2)[2]) ^ (d2[3] & G(2)[3]);
          c24= (d2[0] & G(3)[0]) ^ (d2[1] & G(3)[1]) ^ (d2[2] & G(3)[2]) ^ (d2[3] & G(3)[3]);
          c25= (d2[0] & G(4)[0]) ^ (d2[1] & G(4)[1]) ^ (d2[2] & G(4)[2]) ^ (d2[3] & G(4)[3]);
          c26= (d2[0] & G(5)[0]) ^ (d2[1] & G(5)[1]) ^ (d2[2] & G(5)[2]) ^ (d2[3] & G(5)[3]);
          c27= (d2[0] & G(6)[0]) ^ (d2[1] & G(6)[1]) ^ (d2[2] & G(6)[2]) ^ (d2[3] & G(6)[3]);
          c2= (c21 # c22 # c23 # c24 # c25 # c26 # c27);

          c31= (d3[0] & G(0)[0]) ^ (d3[1] & G(0)[1]) ^ (d3[2] & G(0)[2]) ^ (d3[3] & G(0)[3]);
          c32= (d3[0] & G(1)[0]) ^ (d3[1] & G(1)[1]) ^ (d3[2] & G(1)[2]) ^ (d3[3] & G(1)[3]);
          c33= (d3[0] & G(2)[0]) ^ (d3[1] & G(2)[1]) ^ (d3[2] & G(2)[2]) ^ (d3[3] & G(2)[3]);
          c34= (d3[0] & G(3)[0]) ^ (d3[1] & G(3)[1]) ^ (d3[2] & G(3)[2]) ^ (d3[3] & G(3)[3]);
          c35= (d3[0] & G(4)[0]) ^ (d3[1] & G(4)[1]) ^ (d3[2] & G(4)[2]) ^ (d3[3] & G(4)[3]);
          c36= (d3[0] & G(5)[0]) ^ (d3[1] & G(5)[1]) ^ (d3[2] & G(5)[2]) ^ (d3[3] & G(5)[3]);
          c37= (d3[0] & G(6)[0]) ^ (d3[1] & G(6)[1]) ^ (d3[2] & G(6)[2]) ^ (d3[3] & G(6)[3]);
          c3= (c31 # c32 # c33 # c34 # c35 # c36 # c37);

          c41= (d4[0] & G(0)[0]) ^ (d4[1] & G(0)[1]) ^ (d4[2] & G(0)[2]) ^ (d4[3] & G(0)[3]);
          c42= (d4[0] & G(1)[0]) ^ (d4[1] & G(1)[1]) ^ (d4[2] & G(1)[2]) ^ (d4[3] & G(1)[3]);
          c43= (d4[0] & G(2)[0]) ^ (d4[1] & G(2)[1]) ^ (d4[2] & G(2)[2]) ^ (d4[3] & G(2)[3]);
          c44= (d4[0] & G(3)[0]) ^ (d4[1] & G(3)[1]) ^ (d4[2] & G(3)[2]) ^ (d4[3] & G(3)[3]);
          c45= (d4[0] & G(4)[0]) ^ (d4[1] & G(4)[1]) ^ (d4[2] & G(4)[2]) ^ (d4[3] & G(4)[3]);
          c46= (d4[0] & G(5)[0]) ^ (d4[1] & G(5)[1]) ^ (d4[2] & G(5)[2]) ^ (d4[3] & G(5)[3]);
          c47= (d4[0] & G(6)[0]) ^ (d4[1] & G(6)[1]) ^ (d4[2] & G(6)[2]) ^ (d4[3] & G(6)[3]);
          c4= (c41 # c42 # c43 # c44 # c45 # c46 # c47);

          code= c1 # c2 # c3 # c4;
//           $display($hex,code);
          
           //syndrome calculation
          s11= (c1[0] & H(2)[0]) ^ (c1[1] & H(2)[1]) ^ (c1[2] & H(2)[2]) ^ (c1[3] & H(2)[3]) ^ (c1[4] & H(2)[4]) ^ (c1[5] & H(2)[5]) ^(c1[6] & H(2)[6]); 
          s12= (c1[0] & H(1)[0]) ^ (c1[1] & H(1)[1]) ^ (c1[2] & H(1)[2]) ^ (c1[3] & H(1)[3]) ^ (c1[4] & H(1)[4]) ^ (c1[5] & H(1)[5]) ^(c1[6] & H(1)[6]); 
          s13= (c1[0] & H(0)[0]) ^ (c1[1] & H(0)[1]) ^ (c1[2] & H(0)[2]) ^ (c1[3] & H(0)[3]) ^ (c1[4] & H(0)[4]) ^ (c1[5] & H(0)[5]) ^(c1[6] & H(0)[6]); 
          s1= s11 # s12 # s13;

          s21= (c2[0] & H(2)[0]) ^ (c2[1] & H(2)[1]) ^ (c2[2] & H(2)[2]) ^ (c2[3] & H(2)[3]) ^ (c2[4] & H(2)[4]) ^ (c2[5] & H(2)[5]) ^(c2[6] & H(2)[6]); 
          s22= (c2[0] & H(1)[0]) ^ (c2[1] & H(1)[1]) ^ (c2[2] & H(1)[2]) ^ (c2[3] & H(1)[3]) ^ (c2[4] & H(1)[4]) ^ (c2[5] & H(1)[5]) ^(c2[6] & H(1)[6]); 
          s23= (c2[0] & H(0)[0]) ^ (c2[1] & H(0)[1]) ^ (c2[2] & H(0)[2]) ^ (c2[3] & H(0)[3]) ^ (c2[4] & H(0)[4]) ^ (c2[5] & H(0)[5]) ^(c2[6] & H(0)[6]); 
          s2= s21 # s22 # s23;

          s31= (c3[0] & H(2)[0]) ^ (c3[1] & H(2)[1]) ^ (c3[2] & H(2)[2]) ^ (c3[3] & H(2)[3]) ^ (c3[4] & H(2)[4]) ^ (c3[5] & H(2)[5]) ^(c3[6] & H(2)[6]); 
          s32= (c3[0] & H(1)[0]) ^ (c3[1] & H(1)[1]) ^ (c3[2] & H(1)[2]) ^ (c3[3] & H(1)[3]) ^ (c3[4] & H(1)[4]) ^ (c3[5] & H(1)[5]) ^(c3[6] & H(1)[6]); 
          s33= (c3[0] & H(0)[0]) ^ (c3[1] & H(0)[1]) ^ (c3[2] & H(0)[2]) ^ (c3[3] & H(0)[3]) ^ (c3[4] & H(0)[4]) ^ (c3[5] & H(0)[5]) ^(c3[6] & H(0)[6]); 
          s3= s31 # s32 # s33;

          s41= (c4[0] & H(2)[0]) ^ (c4[1] & H(2)[1]) ^ (c4[2] & H(2)[2]) ^ (c4[3] & H(2)[3]) ^ (c4[4] & H(2)[4]) ^ (c4[5] & H(2)[5]) ^(c4[6] & H(2)[6]); 
          s42= (c4[0] & H(1)[0]) ^ (c4[1] & H(1)[1]) ^ (c4[2] & H(1)[2]) ^ (c4[3] & H(1)[3]) ^ (c4[4] & H(1)[4]) ^ (c4[5] & H(1)[5]) ^(c4[6] & H(1)[6]); 
          s43= (c4[0] & H(0)[0]) ^ (c4[1] & H(0)[1]) ^ (c4[2] & H(0)[2]) ^ (c4[3] & H(0)[3]) ^ (c4[4] & H(0)[4]) ^ (c4[5] & H(0)[5]) ^(c4[6] & H(0)[6]); 
          s4= s41 # s42 # s43;

          syndrome = s1 # s2 # s3 # s4;

                    
  }

}

dp blockcode_shell(in  address       : ns(8);
                  in  read          : ns(1);
                  out readdata      : ns(32);
                  in  write         : ns(1);
                  in  writedata     : ns(32);
                  out readdatavalid : ns(1);
                  out waitrequest   : ns(1)) {

  sig data_in, code_out, syndrome_out : ns(32);
  use block_code(data_in, code_out, syndrome_out);
  reg reg_data_in : ns(32);
    

  always {

     data_in      = reg_data_in;
     readdatavalid = read; 
     waitrequest   = 0;    
	 reg_data_in   = (write==1) ? writedata : reg_data_in;
	 
	 
	 
	 
     // TO BE DESIGNED BY YOU
     //    Decode the Avalon Memory Operations to read from
     //      code_out and syndrome_out:
     //
     //         address   r/w   register
     //           0x1      r    syndrome_out
     //           0x0      r    code_out
	 
     readdata   = .. // To be filled by you



  }
}

dp test {
  sig address       : ns( 8); // in
  sig read          : ns( 1); // in
  sig readdata      : ns(32); 
  sig write         : ns( 1); // in
  sig writedata     : ns(32); // in
  sig readdatavalid : ns( 1); 
  sig waitrequest   : ns( 1);
  use blockcode_shell(address, read, readdata, write, writedata, readdatavalid, waitrequest);

  sfg c00 { address = 0; read = 0; write = 1; writedata = 0x00010203;        }
  sfg c01 { address = 0; read = 0; write = 1; writedata = 0x04050607;        }
  sfg c02 { address = 0; read = 0; write = 1; writedata = 0x08090a0b;        }
  sfg c03 { address = 0; read = 0; write = 1; writedata = 0x0c0d0e0f;        }
  sfg show1 { address = 0; read = 1; write = 0; writedata = 0; 
             $display("Code ", readdata);                         }
  sfg show2 { address = 1; read = 1; write = 0; writedata = 0; 
             $display("syndrome ", readdata);                         }
}
sequencer ctl_test(test) {
  c00; show1; show2;
  c01; show1; show2;
  c02; show1; show2;
  c03; show1; show2;
}

system S {
  test;
}
